#! /usr/bin/env python
# -*-python-*-

"""Using the Python env/kernel specified by the first parameter, execute all
notebooks specified by subsequent parameters.
"""

import sys
import os.path
import subprocess
import glob
import shutil
import uuid


def test_notebooks(kernel, notebook_globs):
    """Run all the notebooks specified by globbing `notebook_globs` using `kernel`.

    Return   count of failed notebooks
    """
    notebooks = [
        notebook for pattern in notebook_globs for notebook in glob.glob(pattern)
    ]
    errs = 0
    for notebook in notebooks:
        if notebook.startswith("#"):
            print("=" * 10, "Skipping Notebook", notebook, "=" * 10)
            continue
        print("=" * 10, "Testing Notebook", notebook, "=" * 10)
        err = test_notebook(kernel, notebook)
        print("Tested notebook", notebook, "... ok" if not err else "... FAIL")
        errs += err
    return errs


def test_notebook(kernel, notebook):
    here = os.getcwd()
    err = 1  # assume failed
    try:
        source_path = os.path.dirname(os.path.abspath(notebook))

        temp_dir = "/tmp/" + str(uuid.uuid4())
        shutil.copytree(source_path, temp_dir)
        os.chdir(temp_dir)

        notebook_copy = f"{temp_dir}/{os.path.basename(notebook)}"
        err = subprocess.call(
            f"papermill {notebook_copy} test.ipynb -k {kernel}".split()
        )  # maybe succeeds

        shutil.rmtree(temp_dir, ignore_errors=True)
    finally:
        os.chdir(here)
    return int(err != 0)


def main(*args):
    if len(args) < 2:  # accept 0 notebooks...
        print("test-notebooks <kernel>  <notebooks...>", file=sys.stderr)
        sys.exit(2)
    kernel = sys.argv[1]
    notebook_globs = sys.argv[2:]
    return test_notebooks(kernel, notebook_globs)


if __name__ == "__main__":
    if main(*sys.argv):
        sys.exit(1)

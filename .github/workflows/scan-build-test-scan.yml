name: docker

on:
   schedule:
     - cron: '0 0 */7 * *'
   push:
      branches:
        - main
   pull_request:
      branches:
        - main

jobs:
  docker:
    name: "${{ matrix.DEPLOYMENT_NAME }}  -- scan, build, test, scan"
    runs-on: ubuntu-18.04

    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        DEPLOYMENT_NAME: [ jwebbinar, roman, tike]
        USE_FROZEN: [ 0 ]

    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: free disk space, prepare swap
        run: |
             df -h
             sudo apt clean
             docker rmi $(docker image ls -aq)
             docker container prune -f
             sudo rm -rf "/usr/local/share/boost"
             sudo rm -rf "$AGENT_TOOLSDIRECTORY"
             sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
             sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
             sudo swapoff -a
             sudo rm -f /swapfile
             sudo fallocate -l 20G /swapfile
             sudo chmod 0600 /swapfile
             sudo mkswap /swapfile
             sudo swapon /swapfile
             cat /proc/meminfo
             df -h

      - name: set up environment
        run: |
           tools/image-configure ${{ matrix.DEPLOYMENT_NAME }}  ${{ matrix.USE_FROZEN }}
           df -h

      - name: source code scan
        run: |
           source setup-env
           tools/source-scan

      - name: image build
        run: |
           source setup-env
           tools/image-build
           df -h
           docker image ls

      - name: git diffs (frozen specs)
        run: git diff

      # - name: Anchore image scan
      #   uses: anchore/scan-action@v2
      #   with:
      #      image: standalone_jupyterlab/${{ matrix.DEPLOYMENT_NAME }}-user-image:latest
      #      acs-report-enable: true
      #      fail-build: false
      #      severity-cutoff: high

      # - name: grype scan JSON results
      #   run: for j in `ls ./anchore-reports/*.json`; do echo "---- ${j} ----"; cat ${j}; echo; done

      # - name: Inspect action SARIF report
      #   run: cat ${{ steps.scan.outputs.sarif }}

      - name: image test
        run: |
           df -h
           source setup-env
           tools/image-test
           df -h
